#+Title: Experience Report:\newline Steps to "Emacs Hyper Notebooks"
#+Author: Joseph Corneli, Raymond Puzio, and Cameron Ray Smith
#+Date: 10 minute talk for EmacsConf 2020 (draft: \today)
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[utf8x]{inputenc}


* Scenario                                                           :one:
Ray and Cameron have been collaborating for years on theoretical
biology research.  For instance, in a typical project, we might use
Maxima to make symbolic calculations and Julia for simulations.

- E.g., Latest work in progress is on *XXX YYY*.
* The problem

Interfacing the tools we use involves moving code and data between
different programs by hand.  Then, when we make progress, we have
another workflow for writing up our results as notes and preparing
them for publication.  All this going back and forth between different
software applications is time-consuming and distracting --- is there a
better way?

* Possible solutions

Cameron is experienced with Jupyter, but it doesn't solve all of the problems above.

- Script of Scripts (https://vatlab.github.io/sos-docs/) partially solves /some/ of the problems.

Joe was happy to provide some tech support with Emacs thinking about
another solution.

# * The problem in general                                               :one:

# When working on a scientific research project, one typically has
# multiple different computer programs running at the same time.
# But Emacs is meant to be an "operating system", so...

# * Emacs+Org Mode solutions                                             :two:

# Switching and moving content among individual programs can be
# distracting, time-consuming, and prone to error.  These issues are
# compounded when there are several collaborators involved.

* Emacs+Org Mode...

| TOOLS    | EMACS/ORG      |                                        |
| Maxima   | maxima-mode    | Solving DE symbolically                |
| Julia    | julia-mode     | Run the numerical solver               |
|          | org-poly       | Run multiple modes inside Org mode     |
| Beamer   | org-tree-slide | Make slides for a presentation.        |
| Wikis    | Org Roam       | Prepare the paper on a wiki            |
| —        | Logseq         | ... with coauthors who don’t use Emacs |
| Pairing  | lockstep.el    | Collaborate in real time               |
| Etherpad | crdt.el        | ... with multiple people typing        |
| Zotero   | ORB            | Reference related work                 |
| TeX      | latex-mode     | Typeset the results                    |
| Jekyll   | Firn           | Publish work in progress on your blog  |
| KaTeX    |                | ... including LaTeX math               |
| LaTeXML  |                | ... including lots of LaTeX            |

* Demo                                                               :three:

** NYC Demo

- Behind the scenes, showing how we called external routines
- Introduce ob-servant, a general-purpose tool for calling processes from Org Mode

** Any additions since then

- Getting the automatic LaTeX typesetting display integrated
- Hopefully adding images

* Reflections                                                          :one:

We outline both the pleasure and *pain* involved in this experience.

0. We tried getting Emacs running in the browser but command keys
   didn’t pass through properly on the most popular browsers.
1. Getting *emacs-juypter* working wasn’t easy and we didn't get
   everything working yet!
2. By comparison working on ob-servant was pretty fun!  But there's
   also more to be done here.
3. ... Looking forward to seeing the demo!
4. ... Getting images sorted out is an extra step to think about.
5. A few small *compatibility issues* came up with Firn and Logseq

* Next steps                                                           :one:

1. Combining *Evan Patterson's* string diagram stuff?
2. (Can we feed in diagrams and get out code?)
3. Look at examples from *Charlie* for examples from his work as an analyst

* Conclusions: we have taken some steps to address:                    :one:

** Reproducible research

- Our motivations relate, broadly, to reproducibility of research in science.
- We think that something is "reproducible" if it is teachable to someone who hasn't been doing it all along. 
- We think that Org Mode (and literate programming in general) is useful for this.
- A paper plus supplementary data and code often isn't enough to actually reproduce the result!

** Interdisciplinary collaboration

- Collaboration across different skill sets is SUPER challenging.
- Our collaboration was between a physicist and a mathematical biologist, but what about collaborations between a scenario planner, a simulation scientist, and local farmers?

* Future work

** Science should be:

- widely teachable
- sharable
- semi-automated
- transdisciplinary
- real-time, like EmacsConf!

* Appendix I

** TODO Refresh on ob-servant code
** TODO Gather the notebook
** TODO Check org-mode variables to deal with the copy-paste issues
** DONE Ask Charlie for an example notebook and maybe a meeting about that

* Appendix II

** TODO Repeat something like Minnesota 2050 with some of these tools
** TODO Do due dilligence on https://remo.co/

** TODO Think about about the connections with Peeragogy & Ethics
Is there a pattern where, if you have different subjects, interleave
them in this way to make them branch out and learn?

E.g, scenario with Piet thinking about Big Bang, or Peeragogy people
thinking about Futures Studies

Who were doing astronomy 3000 or 5000 years ago?  Priests.

Kepler on logarithms: they’re great!  Ptolemy didn’t have them and it
made a huge difference.

Interchange between business, science, and religion.


** TODO Would it have applications, e.g., in startup incubators?  (Could we have a startup incubator "on demand"?)
# Local Variables:
# org-latex-inputenc-alist: (("utf8" . "utf8x"))
# eval: (setq org-latex-default-packages-alist (cons '("mathletters" "ucs" nil) org-latex-default-packages-alist))
# End:
